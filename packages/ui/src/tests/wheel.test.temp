import { fireEvent, render, screen } from '@testing-library/react';
import { Check, Home, Mail, Search, Settings, X } from 'lucide-react';

import { Wheel } from '..';

describe('Wheel Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('should render without crashing', () => {
      // Pass specific icons to avoid using default TriangleAlert
      render(
        <Wheel
          type="five"
          icons={[Home, Settings, Check, X, Search]}
          data-testid="wheel"
        />,
      );

      // Check if SVG rendered
      const svg = document.querySelector('svg');
      expect(svg).toBeInTheDocument();

      // Check if at least one path was rendered
      const paths = document.querySelectorAll('path');
      expect(paths.length).toBeGreaterThan(0);
    });

    it('should render with confirm type (2 sectors)', () => {
      render(<Wheel type="confirm" icons={[Check, X]} />);
      // Confirm type should have 2 paths (sectors)
      const paths = document.querySelectorAll('path');
      expect(paths.length).toBe(4);
    });

    it('should render with four type (4 sectors)', () => {
      render(<Wheel type="four" icons={[Home, Search, Settings, Mail]} />);
      // Four type should have 4 paths (sectors)
      const paths = document.querySelectorAll('path');
      expect(paths.length).toBe(8);
    });

    it('should render with five type (5 sectors)', () => {
      render(<Wheel type="five" icons={[Home, Settings, Check, X, Mail]} />);
      // Five type should have 5 paths (sectors)
      const paths = document.querySelectorAll('path');
      expect(paths.length).toBe(10);
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('should show title on hover', () => {
      const titles = ['Confirm', 'Cancel'];

      render(<Wheel type="confirm" icons={[Check, X]} titles={titles} />);

      // Initially, no title should be shown
      expect(screen.queryByText(titles[0]!)).not.toBeInTheDocument();

      // Hover over the first sector
      const firstSector = document.querySelector('path');
      fireEvent.mouseEnter(firstSector!);

      // Title should be visible
      expect(screen.getByText(titles[0]!)).toBeInTheDocument();

      // Mouse leave should hide the title
      fireEvent.mouseLeave(firstSector!);
      expect(screen.queryByText(titles[0]!)).not.toBeInTheDocument();
    });

    it('should call onSelect when a sector is clicked', () => {
      const handleSelect = jest.fn();

      render(
        <Wheel type="confirm" icons={[Check, X]} onSelect={handleSelect} />,
      );

      // Click the first sector
      const firstSector = document.querySelector('path');
      fireEvent.click(firstSector!);

      // onSelect should be called with index 0
      expect(handleSelect).toHaveBeenCalledWith(0);
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('should apply primary variant class', () => {
      render(
        <Wheel
          type="five"
          variant="primary"
          icons={[Home, Settings, Check, X, Mail]}
        />,
      );
      const firstSector = document.querySelector('path');
      expect(firstSector).toHaveClass('fill-primary');
    });

    it('should apply secondary variant class', () => {
      render(
        <Wheel
          type="five"
          variant="secondary"
          icons={[Home, Settings, Check, X, Mail]}
        />,
      );
      const firstSector = document.querySelector('path');
      expect(firstSector).toHaveClass('fill-secondary');
    });

    it('should apply destructive variant class', () => {
      render(
        <Wheel
          type="five"
          variant="destructive"
          icons={[Home, Settings, Check, X, Mail]}
        />,
      );
      const firstSector = document.querySelector('path');
      expect(firstSector).toHaveClass('fill-destructive');
    });

    it('should apply outline variant class', () => {
      render(
        <Wheel
          type="five"
          variant="outline"
          icons={[Home, Settings, Check, X, Mail]}
        />,
      );
      const firstSector = document.querySelector('path');
      expect(firstSector).toHaveClass('fill-background');
      expect(firstSector).toHaveClass('stroke-input');
    });
  });

  // Props and customization tests
  describe('Props and Customization', () => {
    it('should apply custom radius and innerRadius', () => {
      const customRadius = 100;
      const customInnerRadius = 50;

      render(
        <Wheel
          type="five"
          radius={customRadius}
          innerRadius={customInnerRadius}
          icons={[Home, Settings, Check, X, Mail]}
        />,
      );

      // Check if the path contains the custom radius values
      // This is a simplified test - in a real test you might use a more robust approach
      const path = document.querySelector('path');
      const pathData = path!.getAttribute('d');

      // The path should contain references to the radius values
      expect(pathData).toContain(customRadius.toString());
      expect(pathData).toContain(customInnerRadius.toString());
    });

    it('should use default titles when not provided', () => {
      render(<Wheel type="confirm" icons={[Check, X]} />);

      // Hover over the first sector to show title
      const firstSector = document.querySelector('path');
      fireEvent.mouseEnter(firstSector!);

      // Default title should be visible
      expect(screen.getByText('Action 0')).toBeInTheDocument();
    });

    it('should use custom titles when provided', () => {
      const customTitles = ['Custom 1', 'Custom 2'];

      render(<Wheel type="confirm" icons={[Check, X]} titles={customTitles} />);

      // Hover over the first sector to show title
      const firstSector = document.querySelector('path');
      fireEvent.mouseEnter(firstSector!);

      // Custom title should be visible
      expect(screen.getByText(customTitles[0]!)).toBeInTheDocument();
    });
  });
});
